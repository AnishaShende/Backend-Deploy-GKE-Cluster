name: Build, Push & Deploy Backend to GKE

on:
  push:
    paths:
      - 'backend/**'
    branches:
      - main

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      # This just extract repo name and version(from package.json) dynamically, you can change version extraction according to you
      - name: Set image name and version
        id: vars
        run: |
          REPO_NAME=$(basename $GITHUB_REPOSITORY)
          if [ -f backend/VERSION ]; then
            VERSION=$(cat backend/VERSION)
          elif [ -f backend/package.json ]; then
            VERSION=$(jq -r '.version' backend/package.json)
          else
            VERSION="0.0.1"
          fi
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          IMAGE_NAME="${{ steps.vars.outputs.repo_name }}:${{ steps.vars.outputs.version }}"
          docker build -t "$IMAGE_NAME" ./backend

      - name: Push Docker image
        run: |
          IMAGE_NAME="${{ steps.vars.outputs.repo_name }}:${{ steps.vars.outputs.version }}"
          docker push "$IMAGE_NAME"

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Deploy backend to GKE
        run: |
          IMAGE="${{ steps.vars.outputs.repo_name }}:${{ steps.vars.outputs.version }}"
          sed -i "s|IMAGE_PLACEHOLDER|$IMAGE|g" backend/deployment.yaml
          kubectl apply -f backend/deployment.yaml
          kubectl rollout status deployment/backend-deployment --namespace=default

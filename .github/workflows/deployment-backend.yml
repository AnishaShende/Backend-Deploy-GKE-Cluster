name: Build, Push & Deploy Backend to GKE

on:
  push:
    paths:
      - 'backend/**'
    branches:
      - main

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGISTRY_HOSTNAME: gcr.io
      GCP_REPO_NAME: my-backend-repo
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
      GKE_ZONE: ${{ secrets.GKE_ZONE }}
      GCP_API_KEYFILE_BASE64: ${{ secrets.GCP_API_KEYFILE_BASE64 }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Google Cloud SDK
        run: |
          curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-468.0.0-linux-x86_64.tar.gz
          tar -xf google-cloud-cli-468.0.0-linux-x86_64.tar.gz
          ./google-cloud-sdk/install.sh

      - name: Decode base64 GCP key and authenticate
        run: |
          echo $GCP_API_KEYFILE_BASE64 | base64 -d > ./gcloud-key.json
          ./google-cloud-sdk/bin/gcloud auth activate-service-account --key-file=./gcloud-key.json
          ./google-cloud-sdk/bin/gcloud config set project $GCP_PROJECT_ID
          ./google-cloud-sdk/bin/gcloud auth configure-docker $GCP_REGISTRY_HOSTNAME --quiet

      - name: Set image name and version
        id: vars
        run: |
          REPO_PATH="$GCP_PROJECT_ID/$GCP_REPO_NAME"
          APP_NAME=$(basename $GITHUB_REPOSITORY)
          
          if [ -f backend/VERSION ]; then
            VERSION=$(cat backend/VERSION)
          elif [ -f backend/package.json ]; then
            VERSION=$(jq -r '.version' backend/package.json)
          else
            VERSION="0.0.1"
          fi
          
          IMAGE_NAME="$GCP_REGISTRY_HOSTNAME/$REPO_PATH/$APP_NAME:$VERSION"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "Image to be used: $IMAGE_NAME"

      - name: Build Docker image
        run: |
          docker build ./backend -t ${{ steps.vars.outputs.image_name }}

      - name: Push Docker image
        run: |
          docker push ${{ steps.vars.outputs.image_name }}

      - name: Get GKE credentials
        run: |
          ./google-cloud-sdk/bin/gcloud container clusters get-credentials $GKE_CLUSTER \
            --zone $GKE_ZONE --project $GCP_PROJECT_ID

      - name: Deploy to GKE
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|${{ steps.vars.outputs.image_name }}|g" backend/deployment.yaml
          kubectl apply -f backend/deployment.yaml
          kubectl rollout status deployment/backend-deployment --namespace=default

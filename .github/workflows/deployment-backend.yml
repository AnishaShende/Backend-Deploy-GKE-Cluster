name: Build, Push & Deploy Backend to GKE

on:
  push:
    paths:
      - 'backend/**'
    branches:
      - main

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGISTRY_HOSTNAME: gcr.io
      GCP_REPO_NAME: my-backend-repo
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
      GKE_ZONE: ${{ secrets.GKE_ZONE }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCP_SA_KEY }}

      - name: Configure Docker for GCP registry
        run: gcloud auth configure-docker ${{ env.GCP_REGISTRY_HOSTNAME }} --quiet

      - name: Set image name and version
        id: vars
        run: |
          REPO_PATH="${GCP_PROJECT_ID}/${GCP_REPO_NAME}"
          APP_NAME=$(basename "${GITHUB_REPOSITORY}")
          
          if [ -f backend/VERSION ]; then
            VERSION=$(cat backend/VERSION)
          elif [ -f backend/package.json ]; then
            VERSION=$(jq -r '.version' backend/package.json)
          else
            VERSION="0.0.1"
          fi
          
          IMAGE_NAME="${GCP_REGISTRY_HOSTNAME}/${REPO_PATH}/${APP_NAME}:${VERSION}"
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "Image to be used: ${IMAGE_NAME}"

      - name: Build Docker image
        run: docker build ./backend -t ${{ steps.vars.outputs.image_name }}

      - name: Push Docker image
        run: docker push ${{ steps.vars.outputs.image_name }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|${{ steps.vars.outputs.image_name }}|g" backend/deployment.yaml
          kubectl apply -f backend/deployment.yaml
          kubectl rollout status deployment/backend-deployment --namespace=default

name: Build & Push Backend Docker image to GKE

on:
  push:
    paths:
      - 'backend/**'
    branches:
      - main

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGISTRY_HOSTNAME: us-west1-docker.pkg.dev
      GCP_REPO_NAME: uptiq-v2-app-builder-publish-backend
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
      # GKE_ZONE: ${{ secrets.GKE_ZONE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Set image name and version
        id: vars
        run: |
          # GitHub repository name (without owner)
          IMAGE_NAME=$(basename $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')

          # Determine version
          if [ -f backend/VERSION ]; then
            VERSION=$(cat backend/VERSION)
          elif [ -f backend/package.json ]; then
            VERSION=$(jq -r '.version' backend/package.json)
          else
            VERSION="0.0.1"
          fi

          # Full Docker image path
          FULL_IMAGE_NAME="${GCP_REGISTRY_HOSTNAME}/${GCP_PROJECT_ID}/${GCP_REPO_NAME}/${IMAGE_NAME}:${VERSION}"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image_name=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "Image to be used: $FULL_IMAGE_NAME"

      # - name: Configure Docker for GCR
      #   run: gcloud auth configure-docker ${{ env.GCP_REGISTRY_HOSTNAME }} --quiet

      - name: Authenticate Docker with Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGISTRY_HOSTNAME }} --quiet
          gcloud auth print-access-token | docker login ${{ env.GCP_REGISTRY_HOSTNAME }} \
            -u oauth2accesstoken --password-stdin
        
      - name: Build Docker image
        run: docker build ./backend -t ${{ steps.vars.outputs.image_name }}

      - name: Print Docker path
        run: echo ${{ steps.vars.outputs.image_name }}

      - name: Push Docker image
        run: docker push ${{ steps.vars.outputs.image_name }}
